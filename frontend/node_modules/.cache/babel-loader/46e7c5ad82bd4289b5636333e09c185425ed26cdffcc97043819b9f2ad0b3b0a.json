{"ast":null,"code":"import axios from 'axios';\n\n// Get the base URL from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// --- NEW: Auth APIs ---\n// Function to set the authentication token in future requests\nexport const setAuthToken = token => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n};\n\n// Login API call\nexport const loginUser = async (username, password) => {\n  const formData = new URLSearchParams();\n  formData.append('username', username);\n  formData.append('password', password);\n  const response = await apiClient.post('/api/v1/token', formData.toString(), {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n  return response.data;\n};\n\n// Register API call\nexport const registerUser = userData => {\n  return apiClient.post('/api/v1/register', userData);\n};\n\n// Get current user profile (protected endpoint)\nexport const getCurrentUser = () => {\n  return apiClient.get('/api/v1/users/me/');\n};\n\n// Update user password (protected endpoint)\nexport const changePassword = (old_password, new_password) => {\n  return apiClient.put('/api/v1/users/me/password', {\n    old_password,\n    new_password\n  });\n};\n\n// --- Conversation APIs ---\nexport const getConversations = () => apiClient.get('/api/v1/conversations/');\nexport const getArchivedConversations = () => apiClient.get('/api/v1/conversations/archived');\nexport const createConversation = title => apiClient.post('/api/v1/conversations/', {\n  title\n});\nexport const getConversationById = id => apiClient.get(`/api/v1/conversations/${id}`);\nexport const exportConversation = id => apiClient.get(`/api/v1/conversations/${id}/export`);\nexport const addMessageToConversation = (id, text, targetLang) => {\n  const requestBody = {\n    text_to_translate: text,\n    target_language: targetLang\n  };\n  return apiClient.post(`/api/v1/conversations/${id}/translate`, requestBody);\n};\nexport const updateConversationSettings = (id, settings) => {\n  return apiClient.patch(`/api/v1/conversations/${id}/settings`, settings);\n};\nexport const renameConversation = (id, title) => {\n  return apiClient.patch(`/api/v1/conversations/${id}/rename`, {\n    title\n  });\n};\nexport const deleteConversation = id => {\n  return apiClient.delete(`/api/v1/conversations/${id}`);\n};\nexport const archiveConversation = (id, is_archived) => {\n  return apiClient.patch(`/api/v1/conversations/${id}/archive`, {\n    is_archived\n  });\n};\n\n// --- Message Actions ---\nexport const editMessage = (id, newText) => {\n  return apiClient.patch(`/api/v1/messages/${id}`, {\n    original_text: newText\n  });\n};\nexport const deleteMessage = id => {\n  return apiClient.delete(`/api/v1/messages/${id}`);\n};\n\n// --- Audio Transcription API ---\nexport const transcribeAudio = audioBlob => {\n  const formData = new FormData();\n  formData.append(\"audio_file\", audioBlob, \"recording.webm\");\n  return apiClient.post('/api/v1/transcribe', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n// --- Text-to-Speech API ---\nexport const callTextToSpeechApi = text => {\n  return apiClient.post('/api/v1/text-to-speech', {\n    text\n  }, {\n    responseType: 'blob'\n  });\n};\n\n// --- General Settings APIs ---\nexport const upsertSetting = (key, value) => {\n  return apiClient.post('/api/v1/settings', {\n    key,\n    value\n  });\n};\nexport const getSetting = key => {\n  return apiClient.get(`/api/v1/settings/${key}`);\n};\n\n// --- User Profile APIs ---\nexport const getUserProfile = () => {\n  return apiClient.get('/api/v1/profile');\n};\nexport const updateUserProfile = profileData => {\n  return apiClient.post('/api/v1/profile', profileData);\n};\n\n// --- Prompt Library APIs ---\nexport const getPrompts = () => apiClient.get('/api/v1/prompts/');\nexport const createPrompt = promptData => apiClient.post('/api/v1/prompts/', promptData);\nexport const updatePrompt = (id, promptData) => apiClient.put(`/api/v1/prompts/${id}`, promptData);\nexport const deletePrompt = id => apiClient.delete(`/api/v1/prompts/${id}`);\n\n// --- Custom Dictionary APIs ---\nexport const getDictionaryEntries = () => apiClient.get('/api/v1/dictionary/');\nexport const createDictionaryEntry = entryData => apiClient.post('/api/v1/dictionary/', entryData);\nexport const updateDictionaryEntry = (id, entryData) => apiClient.put(`/api/v1/dictionary/${id}`, entryData);\nexport const deleteDictionaryEntry = id => apiClient.delete(`/api/v1/dictionary/${id}`);\n\n// --- NEW: Notes APIs ---\nexport const createNoteForConversation = (conversationId, content) => {\n  return apiClient.post(`/api/v1/conversations/${conversationId}/notes/`, {\n    content\n  });\n};\nexport const getNotesForConversation = conversationId => {\n  return apiClient.get(`/api/v1/conversations/${conversationId}/notes/`);\n};\nexport const updateNote = (noteId, content) => {\n  return apiClient.put(`/api/v1/notes/${noteId}`, {\n    content\n  });\n};\nexport const deleteNote = noteId => {\n  return apiClient.delete(`/api/v1/notes/${noteId}`);\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","setAuthToken","token","defaults","common","loginUser","username","password","formData","URLSearchParams","append","response","post","toString","data","registerUser","userData","getCurrentUser","get","changePassword","old_password","new_password","put","getConversations","getArchivedConversations","createConversation","title","getConversationById","id","exportConversation","addMessageToConversation","text","targetLang","requestBody","text_to_translate","target_language","updateConversationSettings","settings","patch","renameConversation","deleteConversation","delete","archiveConversation","is_archived","editMessage","newText","original_text","deleteMessage","transcribeAudio","audioBlob","FormData","callTextToSpeechApi","responseType","upsertSetting","key","value","getSetting","getUserProfile","updateUserProfile","profileData","getPrompts","createPrompt","promptData","updatePrompt","deletePrompt","getDictionaryEntries","createDictionaryEntry","entryData","updateDictionaryEntry","deleteDictionaryEntry","createNoteForConversation","conversationId","content","getNotesForConversation","updateNote","noteId","deleteNote"],"sources":["D:/intelligent translator/frontend/src/apiClient.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Get the base URL from environment variables\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// --- NEW: Auth APIs ---\r\n// Function to set the authentication token in future requests\r\nexport const setAuthToken = (token) => {\r\n  if (token) {\r\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    delete apiClient.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\n// Login API call\r\nexport const loginUser = async (username, password) => {\r\n  const formData = new URLSearchParams();\r\n  formData.append('username', username);\r\n  formData.append('password', password);\r\n\r\n  const response = await apiClient.post('/api/v1/token', formData.toString(), {\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Register API call\r\nexport const registerUser = (userData) => {\r\n  return apiClient.post('/api/v1/register', userData);\r\n};\r\n\r\n// Get current user profile (protected endpoint)\r\nexport const getCurrentUser = () => {\r\n  return apiClient.get('/api/v1/users/me/');\r\n};\r\n\r\n// Update user password (protected endpoint)\r\nexport const changePassword = (old_password, new_password) => {\r\n  return apiClient.put('/api/v1/users/me/password', { old_password, new_password });\r\n};\r\n\r\n\r\n// --- Conversation APIs ---\r\nexport const getConversations = () => apiClient.get('/api/v1/conversations/');\r\nexport const getArchivedConversations = () => apiClient.get('/api/v1/conversations/archived');\r\nexport const createConversation = (title) => apiClient.post('/api/v1/conversations/', { title });\r\nexport const getConversationById = (id) => apiClient.get(`/api/v1/conversations/${id}`);\r\nexport const exportConversation = (id) => apiClient.get(`/api/v1/conversations/${id}/export`);\r\nexport const addMessageToConversation = (id, text, targetLang) => {\r\n  const requestBody = { text_to_translate: text, target_language: targetLang };\r\n  return apiClient.post(`/api/v1/conversations/${id}/translate`, requestBody);\r\n};\r\nexport const updateConversationSettings = (id, settings) => {\r\n  return apiClient.patch(`/api/v1/conversations/${id}/settings`, settings);\r\n};\r\nexport const renameConversation = (id, title) => {\r\n  return apiClient.patch(`/api/v1/conversations/${id}/rename`, { title });\r\n};\r\nexport const deleteConversation = (id) => {\r\n  return apiClient.delete(`/api/v1/conversations/${id}`);\r\n};\r\nexport const archiveConversation = (id, is_archived) => {\r\n  return apiClient.patch(`/api/v1/conversations/${id}/archive`, { is_archived });\r\n};\r\n\r\n// --- Message Actions ---\r\nexport const editMessage = (id, newText) => {\r\n  return apiClient.patch(`/api/v1/messages/${id}`, { original_text: newText });\r\n};\r\nexport const deleteMessage = (id) => {\r\n  return apiClient.delete(`/api/v1/messages/${id}`);\r\n};\r\n\r\n// --- Audio Transcription API ---\r\nexport const transcribeAudio = (audioBlob) => {\r\n  const formData = new FormData();\r\n  formData.append(\"audio_file\", audioBlob, \"recording.webm\");\r\n\r\n  return apiClient.post('/api/v1/transcribe', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n};\r\n\r\n// --- Text-to-Speech API ---\r\nexport const callTextToSpeechApi = (text) => {\r\n  return apiClient.post('/api/v1/text-to-speech', { text }, { responseType: 'blob' });\r\n};\r\n\r\n// --- General Settings APIs ---\r\nexport const upsertSetting = (key, value) => {\r\n  return apiClient.post('/api/v1/settings', { key, value });\r\n};\r\nexport const getSetting = (key) => {\r\n  return apiClient.get(`/api/v1/settings/${key}`);\r\n};\r\n\r\n// --- User Profile APIs ---\r\nexport const getUserProfile = () => {\r\n  return apiClient.get('/api/v1/profile');\r\n};\r\nexport const updateUserProfile = (profileData) => {\r\n  return apiClient.post('/api/v1/profile', profileData);\r\n};\r\n\r\n// --- Prompt Library APIs ---\r\nexport const getPrompts = () => apiClient.get('/api/v1/prompts/');\r\nexport const createPrompt = (promptData) => apiClient.post('/api/v1/prompts/', promptData);\r\nexport const updatePrompt = (id, promptData) => apiClient.put(`/api/v1/prompts/${id}`, promptData);\r\nexport const deletePrompt = (id) => apiClient.delete(`/api/v1/prompts/${id}`);\r\n\r\n// --- Custom Dictionary APIs ---\r\nexport const getDictionaryEntries = () => apiClient.get('/api/v1/dictionary/');\r\nexport const createDictionaryEntry = (entryData) => apiClient.post('/api/v1/dictionary/', entryData);\r\nexport const updateDictionaryEntry = (id, entryData) => apiClient.put(`/api/v1/dictionary/${id}`, entryData);\r\nexport const deleteDictionaryEntry = (id) => apiClient.delete(`/api/v1/dictionary/${id}`);\r\n\r\n// --- NEW: Notes APIs ---\r\nexport const createNoteForConversation = (conversationId, content) => {\r\n    return apiClient.post(`/api/v1/conversations/${conversationId}/notes/`, { content });\r\n};\r\nexport const getNotesForConversation = (conversationId) => {\r\n    return apiClient.get(`/api/v1/conversations/${conversationId}/notes/`);\r\n};\r\nexport const updateNote = (noteId, content) => {\r\n    return apiClient.put(`/api/v1/notes/${noteId}`, { content });\r\n};\r\nexport const deleteNote = (noteId) => {\r\n    return apiClient.delete(`/api/v1/notes/${noteId}`);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}