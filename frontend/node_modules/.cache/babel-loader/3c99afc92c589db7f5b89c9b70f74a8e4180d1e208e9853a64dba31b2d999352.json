{"ast":null,"code":"var _jsxFileName = \"D:\\\\intelligent translator\\\\frontend\\\\src\\\\components\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { setAuthToken, getCurrentUser } from '../apiClient'; // Import apiClient functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Effect to set Axios default header and fetch user on token change\n  useEffect(() => {\n    const initializeAuth = async () => {\n      if (token) {\n        setAuthToken(token);\n        try {\n          const currentUser = await getCurrentUser(); // Fetch user data\n          setUser(currentUser);\n        } catch (error) {\n          console.error('Failed to fetch current user:', error);\n          // If fetching user fails, token might be invalid/expired, so clear it\n          setToken(null);\n          localStorage.removeItem('authToken');\n          setAuthToken(null);\n        }\n      } else {\n        setAuthToken(null); // Ensure no token is set in headers if none exists\n        setUser(null);\n      }\n      setLoading(false); // Authentication initialization is complete\n    };\n    initializeAuth();\n  }, [token]); // Rerun when token changes\n\n  const login = newToken => {\n    setToken(newToken);\n    localStorage.setItem('authToken', newToken);\n    // User data will be fetched by the useEffect hook after token is set\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('authToken');\n    // Clear the Authorization header in Axios\n    setAuthToken(null);\n  };\n  const isAuthenticated = !!token; // Simple check if a token exists\n\n  // If loading, you might want to render a loading spinner or null\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this); // Or a more sophisticated loading component\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      isAuthenticated,\n      login,\n      logout,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Q7/WjX2Kz1N9K5MRV50dLy3N4+w=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","setAuthToken","getCurrentUser","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","user","setUser","loading","setLoading","initializeAuth","currentUser","error","console","removeItem","login","newToken","setItem","logout","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useAuth","_s2","$RefreshReg$"],"sources":["D:/intelligent translator/frontend/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { setAuthToken, getCurrentUser } from '../apiClient'; // Import apiClient functions\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [token, setToken] = useState(localStorage.getItem('authToken'));\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Effect to set Axios default header and fetch user on token change\r\n    useEffect(() => {\r\n        const initializeAuth = async () => {\r\n            if (token) {\r\n                setAuthToken(token);\r\n                try {\r\n                    const currentUser = await getCurrentUser(); // Fetch user data\r\n                    setUser(currentUser);\r\n                } catch (error) {\r\n                    console.error('Failed to fetch current user:', error);\r\n                    // If fetching user fails, token might be invalid/expired, so clear it\r\n                    setToken(null);\r\n                    localStorage.removeItem('authToken');\r\n                    setAuthToken(null);\r\n                }\r\n            } else {\r\n                setAuthToken(null); // Ensure no token is set in headers if none exists\r\n                setUser(null);\r\n            }\r\n            setLoading(false); // Authentication initialization is complete\r\n        };\r\n\r\n        initializeAuth();\r\n    }, [token]); // Rerun when token changes\r\n\r\n    const login = (newToken) => {\r\n        setToken(newToken);\r\n        localStorage.setItem('authToken', newToken);\r\n        // User data will be fetched by the useEffect hook after token is set\r\n    };\r\n\r\n    const logout = () => {\r\n        setToken(null);\r\n        setUser(null);\r\n        localStorage.removeItem('authToken');\r\n        // Clear the Authorization header in Axios\r\n        setAuthToken(null);\r\n    };\r\n\r\n    const isAuthenticated = !!token; // Simple check if a token exists\r\n\r\n    // If loading, you might want to render a loading spinner or null\r\n    if (loading) {\r\n        return <div>Loading authentication...</div>; // Or a more sophisticated loading component\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ token, user, isAuthenticated, login, logout, setUser }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,YAAY,EAAEC,cAAc,QAAQ,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,WAAW,gBAAGR,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC;EACrE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMiB,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAIR,KAAK,EAAE;QACPR,YAAY,CAACQ,KAAK,CAAC;QACnB,IAAI;UACA,MAAMS,WAAW,GAAG,MAAMhB,cAAc,CAAC,CAAC,CAAC,CAAC;UAC5CY,OAAO,CAACI,WAAW,CAAC;QACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;UACrD;UACAT,QAAQ,CAAC,IAAI,CAAC;UACdC,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;UACpCpB,YAAY,CAAC,IAAI,CAAC;QACtB;MACJ,CAAC,MAAM;QACHA,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;QACpBa,OAAO,CAAC,IAAI,CAAC;MACjB;MACAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC;IAEDC,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,MAAMa,KAAK,GAAIC,QAAQ,IAAK;IACxBb,QAAQ,CAACa,QAAQ,CAAC;IAClBZ,YAAY,CAACa,OAAO,CAAC,WAAW,EAAED,QAAQ,CAAC;IAC3C;EACJ,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACjBf,QAAQ,CAAC,IAAI,CAAC;IACdI,OAAO,CAAC,IAAI,CAAC;IACbH,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC;IACpC;IACApB,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMyB,eAAe,GAAG,CAAC,CAACjB,KAAK,CAAC,CAAC;;EAEjC;EACA,IAAIM,OAAO,EAAE;IACT,oBAAOX,OAAA;MAAAG,QAAA,EAAK;IAAyB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EACjD;EAEA,oBACI1B,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,KAAK;MAAEI,IAAI;MAAEa,eAAe;MAAEJ,KAAK;MAAEG,MAAM;MAAEX;IAAQ,CAAE;IAAAP,QAAA,EACjFA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACtB,EAAA,CAxDWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AA0DzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMrC,UAAU,CAACO,WAAW,CAAC;AAAA;AAAC8B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}